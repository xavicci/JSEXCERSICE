const promise = new Promise(function (resolve, reject) {
    resolve('hey!')
});

console.log("AAAA");

const cows = 13;

const countCows = new Promise(function (qwe, asd) {
    if (cows > 10) {
        qwe(`We have ${cows} cows on the farm`);
    } else {
        asd("There is no cows on the farm");
    }

});
console.log("BBBB");

countCows.then((result) => {
    console.log(result);
}).catch((error) => {
    console.log(error)
}).finally(() => console.log('Finally'))

console.log("CCCC");

/* 
ü™É Un callback devuelve una funci√≥n en los par√°metros, cuando llamamos varias veces un callback, estaremos colocando muchas lineas de c√≥digo y ser√≠a engorroso, por eso nacen las promesas, √©stas optimizan y permiten leer mejor el c√≥digo con pocas lineas.
.
ü´±üèº‚Äçü´≤üèæ Las promesas son as√≠ncronas, por lo que el c√≥digo continuar√° su ejecuci√≥n normalmente y luego dir√° si la promesa se resolvi√≥ o se rechaz√≥. Por lo que varias promesas pueden llegar a entrar en ejecuci√≥n al mismo tiempo.
.
Las promesas pueden suceder:
.

Ahora
En el futuro
Nunca
.
üõ†Ô∏è Para crear una promesa:
.
Utilizamos la palabra reservada new seguida de la palabra Promise que es el constructor de la promesa. Este constructor recibe un √∫nico par√°metro que es una funci√≥n, la cu√°l a su vez, recibe otros dos par√°metros: resolve y reject.

El par√°metro resolve se utiliza para cuando la promesa devuelve el valor correctamente.
El par√°metro reject, se usa en el que caso de que no funcione.
.
üìù Ejemplo:
const promise = new Promise(function (resolve, reject){
resolve('hey!');
});
.
üóÉÔ∏è Una Promesa puede estar en uno de los siguientes estados:
.

Pendiente pending ‚Üí Una promesa inicia en este estado: no cumplida, no rechazada:
Una promesa inicialmente est√° pendiente.
Cumplida fulfilled ‚Üí Significa que la operaci√≥n se complet√≥ satisfactoriamente, .then(va => ‚Ä¶)
Cuando llamamos a resolve entonces la promesa pasa a estar resuelta.
Cuando una promesa se resuelve entonces se ejecuta la funci√≥n que pasamos al m√©todo .then
Rechazada rejected ‚Üí significa que la operaci√≥n fall√≥, .catch(err => ‚Ä¶)
Si llamamos a reject pasa a estar rechazada (obtenemos un error que nos va a indicar la raz√≥n del rechazo).
Si la promesa es rechazada entonces se ejecuta la funci√≥n que pasamos a .catch
.
üìù Ejemplo con then y catch:
.

Para probar el c√≥digo, en el proyecto se crea la carpeta llamada promise dentro de la carpeta src.
Se crea el archivo index.js en la ruta: src/promise
El c√≥digo del ejemplo queda as√≠:
//ejemplo de contar vacas
const cows = 15; //valor inicial de vacas

const countCows = new Promise(function(resolve, reject){
//solo si el n√∫mero de vacas supera 10, se llama al resolve
//de lo contrario: se llama a reject
if(cows > 10){
resolve(`We have ${cows} cows on the farm`);
} else {
reject("There is no cows on the farm");
}
});

//con solo .then se obtiene el resultado de la promesa de acuerdo a resolve o reject
//con .catch podemos obtener m√°s informaci√≥n de un futuro error que se presente
//con .finally podemos imprimir un mensaje que indica que ya se ejecut√≥ la promesa
countCows.then((result) => {
console.log(result);
}).catch((error) => {
console.log(error);
}).finally(() => console.log('Finally'));
//se usan arrow function () =>

Para ver el resultado por la consola de VSC, seleccionar el c√≥digo y dar en Run Code, se puede ir probando cambiando la variable inicial cows
 */